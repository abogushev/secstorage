// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: internal/api/proto/resource.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourcesClient is the client API for Resources service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcesClient interface {
	Save(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*UUID, error)
	Delete(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListByUserId(ctx context.Context, in *Query, opts ...grpc.CallOption) (Resources_ListByUserIdClient, error)
	Get(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Resource, error)
	SaveFile(ctx context.Context, opts ...grpc.CallOption) (Resources_SaveFileClient, error)
	GetFile(ctx context.Context, in *UUID, opts ...grpc.CallOption) (Resources_GetFileClient, error)
}

type resourcesClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcesClient(cc grpc.ClientConnInterface) ResourcesClient {
	return &resourcesClient{cc}
}

func (c *resourcesClient) Save(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/secstorage.Resources/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesClient) Delete(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/secstorage.Resources/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesClient) ListByUserId(ctx context.Context, in *Query, opts ...grpc.CallOption) (Resources_ListByUserIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &Resources_ServiceDesc.Streams[0], "/secstorage.Resources/ListByUserId", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourcesListByUserIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Resources_ListByUserIdClient interface {
	Recv() (*ShortResourceInfo, error)
	grpc.ClientStream
}

type resourcesListByUserIdClient struct {
	grpc.ClientStream
}

func (x *resourcesListByUserIdClient) Recv() (*ShortResourceInfo, error) {
	m := new(ShortResourceInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourcesClient) Get(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/secstorage.Resources/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesClient) SaveFile(ctx context.Context, opts ...grpc.CallOption) (Resources_SaveFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Resources_ServiceDesc.Streams[1], "/secstorage.Resources/SaveFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourcesSaveFileClient{stream}
	return x, nil
}

type Resources_SaveFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*UUID, error)
	grpc.ClientStream
}

type resourcesSaveFileClient struct {
	grpc.ClientStream
}

func (x *resourcesSaveFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourcesSaveFileClient) CloseAndRecv() (*UUID, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UUID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourcesClient) GetFile(ctx context.Context, in *UUID, opts ...grpc.CallOption) (Resources_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Resources_ServiceDesc.Streams[2], "/secstorage.Resources/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourcesGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Resources_GetFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type resourcesGetFileClient struct {
	grpc.ClientStream
}

func (x *resourcesGetFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourcesServer is the server API for Resources service.
// All implementations must embed UnimplementedResourcesServer
// for forward compatibility
type ResourcesServer interface {
	Save(context.Context, *Resource) (*UUID, error)
	Delete(context.Context, *UUID) (*emptypb.Empty, error)
	ListByUserId(*Query, Resources_ListByUserIdServer) error
	Get(context.Context, *UUID) (*Resource, error)
	SaveFile(Resources_SaveFileServer) error
	GetFile(*UUID, Resources_GetFileServer) error
	mustEmbedUnimplementedResourcesServer()
}

// UnimplementedResourcesServer must be embedded to have forward compatible implementations.
type UnimplementedResourcesServer struct {
}

func (UnimplementedResourcesServer) Save(context.Context, *Resource) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedResourcesServer) Delete(context.Context, *UUID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourcesServer) ListByUserId(*Query, Resources_ListByUserIdServer) error {
	return status.Errorf(codes.Unimplemented, "method ListByUserId not implemented")
}
func (UnimplementedResourcesServer) Get(context.Context, *UUID) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedResourcesServer) SaveFile(Resources_SaveFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (UnimplementedResourcesServer) GetFile(*UUID, Resources_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedResourcesServer) mustEmbedUnimplementedResourcesServer() {}

// UnsafeResourcesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcesServer will
// result in compilation errors.
type UnsafeResourcesServer interface {
	mustEmbedUnimplementedResourcesServer()
}

func RegisterResourcesServer(s grpc.ServiceRegistrar, srv ResourcesServer) {
	s.RegisterService(&Resources_ServiceDesc, srv)
}

func _Resources_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secstorage.Resources/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).Save(ctx, req.(*Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resources_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secstorage.Resources/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).Delete(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resources_ListByUserId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourcesServer).ListByUserId(m, &resourcesListByUserIdServer{stream})
}

type Resources_ListByUserIdServer interface {
	Send(*ShortResourceInfo) error
	grpc.ServerStream
}

type resourcesListByUserIdServer struct {
	grpc.ServerStream
}

func (x *resourcesListByUserIdServer) Send(m *ShortResourceInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Resources_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secstorage.Resources/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).Get(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resources_SaveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourcesServer).SaveFile(&resourcesSaveFileServer{stream})
}

type Resources_SaveFileServer interface {
	SendAndClose(*UUID) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type resourcesSaveFileServer struct {
	grpc.ServerStream
}

func (x *resourcesSaveFileServer) SendAndClose(m *UUID) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourcesSaveFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Resources_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourcesServer).GetFile(m, &resourcesGetFileServer{stream})
}

type Resources_GetFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type resourcesGetFileServer struct {
	grpc.ServerStream
}

func (x *resourcesGetFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// Resources_ServiceDesc is the grpc.ServiceDesc for Resources service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resources_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secstorage.Resources",
	HandlerType: (*ResourcesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _Resources_Save_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Resources_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Resources_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListByUserId",
			Handler:       _Resources_ListByUserId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveFile",
			Handler:       _Resources_SaveFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _Resources_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/api/proto/resource.proto",
}
